---
import BaseLayout from "../layouts/BaseLayout.astro";
import TweetPost from '../components/TweetPost.astro';
import Pagination from '../components/Pagination.astro';
import TweetCard from '../components/TweetCard.astro';

const pageTitle = "Tweets";
---

<BaseLayout pageTitle={pageTitle}>
  <h2><i class="fab fa-twitter fa-icon social twitter"></i> Showing search results for Freifunk's Tweets</h2>

  <aside class="form">
    <div>
      <label for="search">Search Tweets</label>
      <span>Enter a search term or phrase to search tweets</span>
    </div>
    <input 
      type="search" 
      required 
      min="2" 
      max="24" 
      name="search" 
      id="search" 
      placeholder="Search tweets..." />
  </aside>   

  <p id="searchReadout"></p>
  <section aria-label="Search Results"></section>
  <ul id="searchResults"></ul>

  <script>
    // Import statements for search functionality
    import DOMPurify from 'dompurify';
    import Fuse from 'fuse.js';

    // Global variables to store search data and Fuse instance
    let SEARCH_DATA;
    let FUSE_INSTANCE;
    
    // Configuration for Fuse.js fuzzy search
    // Note: These keys should match your actual data structure
    const FUSE_OPTIONS = {
      includeScore: true,    // Include relevance score in results
      shouldSort: true,      // Sort results by relevance
      threshold: 0.6,        // Lower = more strict matching (0.0 = perfect match, 1.0 = match anything)
      keys: [
        // Search in tweet content (highest priority)
        {
          name: 'content',     // Direct property access
          weight: 0.8
        },
        // Search in author name (medium priority)
        {
          name: 'username',      // Direct property access
          weight: 0.2
        },
        // Alternative nested data structure paths
        {
          name: 'data.content', // If data is nested
          weight: 0.8
        },
        {
          name: 'data.username',  // If data is nested
          weight: 0.2
        },
      ]
    };

    // Loading spinner SVG for visual feedback
    const SPINNER = `
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        width="32" 
        height="32" 
        fill="#000000" 
        viewBox="0 0 256 256" 
        id="spinner"
      >
        <path 
          d="M136,32V64a8,8,0,0,1-16,0V32a8,8,0,0,1,16,0Zm88,88H192a8,8,0,0,0,0,16h32a8,8,0,0,0,0-16Z
             m-45.09,47.6a8,8,0,0,0-11.31,11.31l22.62,22.63a8,8,0,0,0,11.32-11.32ZM128,184
             a8,8,0,0,0-8,8v32a8,8,0,0,0,16,0V192A8,8,0,0,0,128,184ZM77.09,167.6,54.46,190.22
             a8,8,0,0,0,11.32,11.32L88.4,178.91A8,8,0,0,0,77.09,167.6ZM72,128a8,8,0,0,0-8-8H32
             a8,8,0,0,0,0,16H64A8,8,0,0,0,72,128ZM65.78,54.46A8,8,0,0,0,54.46,65.78
             L77.09,88.4A8,8,0,0,0,88.4,77.09Z"
        ></path>
        <style>
          #spinner {
            animation: spin 1s linear infinite;
          }
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        </style>
      </svg>
    `;

    // DOM element selectors
    const search = document.querySelector('#search') as HTMLInputElement;
    const searchReadout = document.querySelector('#searchReadout');
    const resultsList = document.querySelector('#searchResults') as HTMLUListElement;

    /**
     * Updates the document title based on search term
     * @param {string} searchTerm - The current search term
     */
    function updateDocumentTitle(searchTerm: string) {
      document.title = searchTerm
        ? `Search Results for "${searchTerm}"`
        : "Search Tweets";
    }

    /**
     * Updates the search readout text to show current search
     * @param {string} searchTerm - The current search term
     */
    function updateSearchReadout(searchTerm: string) {
      if (searchReadout) {
        searchReadout.textContent = searchTerm
          ? `Search Results for "${searchTerm}"`
          : "";
      }
    }

    /**
     * Updates the URL parameters without page reload
     * @param {string} searchTerm - The current search term
     */
    function updateSearchPageURL(searchTerm: string) {
      const url = new URL(window.location.href);
      if (searchTerm) {
        url.searchParams.set('q', searchTerm);
      } else {
        url.searchParams.delete('q');
      }
      window.history.replaceState({}, '', url.toString());
    }

    /**
     * Generates HTML for search results list
     * @param {Array} results - Array of search results from Fuse.js
     * @returns {string} HTML string for the results
     */
    function generateSearchList(results) {
      return results
        .map((r) => {
          // Extract data from result item
          const item = r.item;
          
          // Handle different data structures
          const content = item.content || item.data?.content || 'No content';
          const author = item.username || item.data?.username || 'Unknown';
          const title = item.title || item.data?.title || '';
          const date = item.date || item.data?.date;
          const slug = item.slug || item.data?.slug;
          
          // Format date if available
          let dateString = '';
          if (date) {
            const dateAsDate = new Date(date);
            dateString = dateAsDate.toLocaleDateString("en-us", {
              year: "numeric",
              month: "short",
              day: "numeric",
            });
          }
          
          // Generate HTML for each result
          return `
            <li class="search-result">
              ${date ? `<time datetime="${new Date(date).toISOString()}">${dateString}</time>` : ''}
              <div class="tweet-content">
                <strong>@${author}</strong>
                ${title ? `<h3>${title}</h3>` : ''}
                <p>${content}</p>
                ${slug ? `<a href="/tweets/${slug}/">Read more</a>` : ''}
                <small>Relevance: ${(1 - r.score).toFixed(2)}</small>
              </div>
            </li>
          `;
        })
        .join("");
    }

    /**
     * Fetches search data and performs search
     * @param {string} searchTerm - The term to search for
     */
    async function fetchSearchResults(searchTerm: string) {
      // Clear results if no search term
      if (searchTerm.length === 0) {
        if (resultsList) {
          resultsList.innerHTML = '';
        }
        return;
      }

      // Show loading spinner
      if (resultsList) {
        resultsList.innerHTML = SPINNER;
      }

      // Fetch search data if not already loaded
      if (!SEARCH_DATA) {
        try {
          console.log('Fetching search data from /search.json...');
          const res = await fetch("/search.json");
          if (!res.ok) {
            throw new Error(`HTTP error! status: ${res.status}`);
          }
          const data = await res.json();
          SEARCH_DATA = data;
          
          // Debug: Log the structure of the first item
          console.log('Search data loaded:', SEARCH_DATA);
          if (SEARCH_DATA.length > 0) {
            console.log('First item structure:', SEARCH_DATA[0]);
            console.log('Available keys:', Object.keys(SEARCH_DATA[0]));
          }
        } catch (e) {
          console.error('Error fetching search data:', e);
          if (resultsList) {
            resultsList.innerHTML = '<li>Error loading search data. Please try again.</li>';
          }
          return;
        }
      }

      // Initialize Fuse instance if not already done
      if (SEARCH_DATA && !FUSE_INSTANCE) {
        console.log("Creating new Fuse instance with options:", FUSE_OPTIONS);
        FUSE_INSTANCE = new Fuse(SEARCH_DATA, FUSE_OPTIONS);
      }

      // Perform search if Fuse instance is available
      if (!FUSE_INSTANCE) {
        console.error('Fuse instance not available');
        if (resultsList) {
          resultsList.innerHTML = '<li>Search not available. Please try again.</li>';
        }
        return;
      }

      // Execute the search
      console.log(`Searching for: "${searchTerm}"`);
      const searchResult = FUSE_INSTANCE.search(searchTerm);
      console.log('Search results:', searchResult);

      // Display results
      if (resultsList) {
        resultsList.innerHTML = searchResult.length > 0
          ? generateSearchList(searchResult)
          : `<li>No results found for "${searchTerm}". Try different keywords or check spelling.</li>`;
      }
    }

    // Event listeners
    if (search) {
      search.addEventListener('input', () => {
        // Sanitize input to prevent XSS
        const searchTerm = DOMPurify.sanitize(search.value);
        
        // Update all UI elements
        updateDocumentTitle(searchTerm);
        updateSearchReadout(searchTerm);
        updateSearchPageURL(searchTerm);
        
        // Perform search
        fetchSearchResults(searchTerm);
      });
    }

    // Initialize search on page load
    window.addEventListener('DOMContentLoaded', async () => {
      // Get search term from URL parameters
      const urlParams = DOMPurify.sanitize(
        new URLSearchParams(window.location.search).get('q') || ''
      );

      // Set up initial state
      if (search) {
        search.value = urlParams;
        search.focus();
      }
      
      // Update UI and perform search
      updateDocumentTitle(urlParams);
      updateSearchReadout(urlParams);
      
      // Only search if there's a term
      if (urlParams) {
        fetchSearchResults(urlParams);
      }
    });
  </script>
</BaseLayout>